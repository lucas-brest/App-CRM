@using Model;
@using Services;
@inject ClienteService ClienteService;

<div class="modal-form">
    <EditForm Model="Cliente" OnValidSubmit="OnValidSubmit">
        <div class="label-section">
            <label>DNI
                <InputNumber @bind-Value="Cliente.DNI" @ref="inputNumber" />
                <ValidationMessage For="@(()=> Cliente.DNI)" />
            </label>
            <label>Nombre
                <InputText @bind-Value="Cliente.Nombre"/>
                <ValidationMessage For="@(()=> Cliente.Nombre)" />
            </label>
            <label>Telefono
                <InputText @bind-Value="Cliente.Telefono"/>
            </label>
            <label>Mail
                <InputText @bind-Value="Cliente.Mail"/>
            </label>
            <label>Direccion
                <InputText @bind-Value="Cliente.Direccion"/>
            </label>
            <label>Observaciones
                <InputText @bind-Value="Cliente.Observaciones"/>
            </label>

        </div>
        <div class="btn-section">
            <button class="btn btn-primary" >Save</button>
            <button class="btn btn-danger" @onclick:preventDefault @onclick="CloseForm">Cancel</button>
        </div>
        <DataAnnotationsValidator />

    </EditForm>
</div>

@code {
    [Parameter]
    public Cliente? Cliente { get; set; } = new Cliente();
    [Parameter, EditorRequired]
    public EventCallback CloseForm { get; set; }
    [Parameter, EditorRequired]
    public EventCallback RefreshList { get; set; }

    private InputNumber<int> inputNumber;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (inputNumber.Element != null)
                await inputNumber.Element.Value.FocusAsync();
    }

    public void OnValidSubmit()
    {
        bool ok = ClienteService.AddUpdateCliente(Cliente);
        if (ok) RefreshList.InvokeAsync();
        CloseForm.InvokeAsync();
    }
}
